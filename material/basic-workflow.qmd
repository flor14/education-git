---
title: "1.2 - Basic workflow"
description: | 
              - Implement Git’s clone, add, status, commit, pull, and push operations on the command line.
              - Explain where information is stored at each stage of that cycle.
date: "01/27/2023"
image: img/arrows.jpg
categories:
  - git clone
  - git add
  - git status
  - git commit
  - git pull
  - git push
  - git log
  - git fetch
bibliography: references.bib
---


## Why teach this?

**Implement Git’s clone, add, status, commit, pull, and push operations on the command line.**
-  Understanding what the commands are doing in relation to the different elements involved, is no trivial task. Further, this should be actively involved in the class activities.
Building a basic but functional initial representation of Git system could be a major challenge of any Git course teaching the basic workflow.

**Explain where information is stored at each stage of that cycle.** (extracted from [The Carpentries](https://swcarpentry.github.io/git-novice/04-changes/index.html))
- This involves explicitly defining all the compartments the students should recognize to be able to use Git effectively (ie. what is the `staging area`, the `index`, the `repository` and the `working directory`?)

## Connection to related topics 

- **Focus on all the pieces of your representations**
[This interesting lesson](https://coderefinery.github.io/git-intro/staging-area/) by Code Refinery is focused on the staging area and all the commands involved with it. It would be a valuable exercise in strengthening the mental model after students have learned the initial Git commands.

- **Best practices**
  - How often to commit, pull and push. 
  - [How to write good commit messages](https://coderefinery.github.io/git-intro/basics/#writing-useful-commit-messages).
  

- **.gitignore**
Once we teach about hidden folders and the basic Git Workflow, it is possible to introduce `.gitignore`.


## Mental Model 

![](img/mm-basic-workflow.png){width=500 fig-align="center"}


## Activities 

- The Carpentries - [Version Control with Git - Tracking Changes](https://swcarpentry.github.io/git-novice/04-changes/index.html)
- Data Science 100 @timbers2022data
- Code Refinery - [Exercises - Record changes](https://coderefinery.github.io/git-intro/basics/#exercise-record-changes)
- Git Kata -  [Git Kata: Basic Commits](https://github.com/eficode-academy/git-katas/blob/master/basic-commits/README.md)
- Git Kata -  [Git Kata: Basic Staging](https://github.com/eficode-academy/git-katas/blob/master/basic-commits/README.md)
- Learn enough Git to Be Dangerous - Michale Harti [Our first commit - exercises](https://www.learnenough.com/git-tutorial#sec-exercises_our_first_commit)
- Learn enough Git to Be Dangerous - Michale Harti [Adding a tag -  `git log` exercise](https://www.learnenough.com/git-tutorial#sec-exercises_adding_a_tag)
- [Git Ruler (bot updated since 2018)](https://github.com/UOL-CS/gitruler-b-1)

# References {.unnumbered}

::: {#refs}

:::
