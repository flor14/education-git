---
title: "Activities to teach version control"
subtitle: "Resources for educators based in students common learning obstacles"
---

## Hello! Nice to meet you.

This is not a course about Git. This is a roadmap to the most common pitfalls I found as Git/GitHUb teacher (and user) and a curated selection of exercises to make potential new students fail in those same strategic situations.

Git has become almost an universal tool to version control files. It doesn't matter what programming language you are using, probably you will be sharing your code on GitHub to collaborate in open source projectsor even if you are workin in a company.

Even if there is online material and tutorials to learn how to use Git, as educator my role is to prepare the class making the students struggle before they face this problems in the real world. Education is the art of trying to make our students fail in a controlled way. Hands-on educative approach (ie constructivist) put the focus on the stuents and there is where it shoucl be.

This project is basically an attemp to leave my notes is a very opinionated curation of Git and GitHub exercises based in the learning objectives I am focusing for teaching in MDS.

All the examples I use in this webpage are freely available online in communities as The Carpentries.


What will you find here?



### The invisible tool
Git is never the star of the game. Git is a tool that you use when you are working in something else, so it is never your primary goal to be a really skilled Git and GitHub user. 
Maybe your goal is to create a machine learning model or create a website. Git is only visible when things are messed up and you have a merge conflict or you commit a mistake and you have to return to a previous commit.  
In this way, Git user experience involves many moments that resembles  deactivating an explosive.

### Dealing with abstraction
There are many complexities in relation to teach Git, the biggest one in my opinion is the high level of abstraction that is needed to can understand what the commands are doing. Building a strong mental model of Git should be the first big objective of any Git course teaching the basic workflow.

The learning objectives x, y and z try to explore that. 

But abstraction is not only part of this when are teaching the commands. Branching for example, is another concept that can be really clarified with the help of visualizations, that are not easy to understand and can have variations in different IDEs.

The learning objectives x, y and z explore that.

### Programmers are humans!
Collaborating with others. Here GitHub takes the lead with a battery of tools that support the collaborative use of Git. 
But it is also possible

Effective use of the tool could imply good commit messages and meaningful name of branches. This has nothing to do with the tool, but will ensure the effective use of the tool.

### The victorinox
Git and GitHub have many tools. Some of them will be practical only in particular reasons. The desicion among using git revert or git reset could be done in relation if you are working with colleagues or only by yourself.
Teaching the tool is affected by the use. Should the use of `git stash` be only explained as a handy tool to avoid merge conflicts? You can also use it for X.
There is not a correct answer, this will be defined in relation to the learning outcome expected as instructor but it is definetly something that should be considered in relation.

### Towards and advanced Git and GitHub course
You will see that all the explanations ends with a section called "What is next?". My idea is to continue finding / clasifying / generating exercises on this topics to make them more advanced. 

Es an educator I know quite well the challenges that teaching sciences and technology could be implemented. 

The final goal of this project is to list all the 


Learning Objectives



Do you want to explore what this project is about? Read our [FAQ](faq.qmd) section!


